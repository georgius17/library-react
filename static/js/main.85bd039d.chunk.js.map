{"version":3,"sources":["UI/Input/Input.module.css","UI/Modal_Backdrop/Modal.module.css","components/Toolbar/Toolbar.module.css","components/LibraryForm/LibraryForm.module.css","UI/Button/Button.module.css","containers/Layout/Layout.module.css","UI/Modal_Backdrop/Backdrop.module.css","containers/BooksPage/BooksPage.module.css","UI/Aux/Aux.js","components/Toolbar/Toolbar.js","containers/Layout/Layout.js","UI/Input/Input.js","UI/Button/Button.js","store/actions/bookHandlerActions.js","store/actions/actionTypes.js","components/LibraryForm/LibraryForm.js","UI/Modal_Backdrop/Backdrop.js","UI/Modal_Backdrop/Modal.js","components/LibraryItems/LibraryItems.js","containers/BooksPage/BooksPage.js","App.js","serviceWorker.js","store/reducers/bookHandlerReducer.js","index.js"],"names":["module","exports","aux","props","children","toolbar","className","classes","header","h2","Layout","Aux","Toolbar","Content","this","Component","input","inputElement","inputClasses","InputElement","invalid","validation","touched","push","Invalid","elementType","join","elementConfig","value","onChange","changed","options","map","option","key","displayValue","Label","label","button","disabled","Button","btnType","onClick","clicked","addBook","bookData","type","LibraryForm","state","newBook","title","placeholder","required","minLength","valid","author","pages","min","max","status","notes","formIsValid","baseState","resetForm","setState","submitted","inputChangeHandler","event","inputID","updatedForm","updatedElement","target","checkValidity","inputId","addBookHandler","preventDefault","newBookData","onAddBook","rules","isValid","trim","length","maxLength","formArray","id","config","form","onSubmit","onReset","onLoad","element","Input","Reset","FormData","connect","dispatch","actions","backdrop","show","Backdrop","Modal","modalClosed","CSSTransition","mountOnEnter","unmountOnExit","in","timeout","enter","exit","classNames","enterActive","ModalOpen","exitActive","ModalClosed","LibraryItems","data","localStorage","setItem","JSON","stringify","books","style","maxWidth","columns","field","editable","onRowUpdate","newData","oldData","Promise","resolve","reject","setTimeout","index","indexOf","onEditBook","onRowDelete","splice","updatedBooks","BooksPage","modalIsOpen","showBlock","showModal","console","log","closeModal","newButton","App","localBooks","getItem","onFetchBooks","parse","storedBooks","Boolean","window","location","hostname","match","initialState","reducer","action","concat","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.85bd039d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3fK7P\",\"Label\":\"Input_Label__34Sn5\",\"InputElement\":\"Input_InputElement__Ooq4A\",\"Invalid\":\"Input_Invalid__2tJbn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Modal\":\"Modal_Modal__1w98b\",\"ModalOpen\":\"Modal_ModalOpen__1m1xX\",\"openModal\":\"Modal_openModal__1EAFz\",\"ModalClosed\":\"Modal_ModalClosed__30FjQ\",\"closeModal\":\"Modal_closeModal__ecQQZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Toolbar_header__1lCeC\",\"h2\":\"Toolbar_h2__3pEnO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"FormData\":\"LibraryForm_FormData__2h7pZ\",\"Input\":\"LibraryForm_Input__2jBsH\",\"Reset\":\"LibraryForm_Reset__1f6-f\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__3h9Fb\",\"Success\":\"Button_Success__1s9q7\",\"Danger\":\"Button_Danger__1lxLJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Content\":\"Layout_Content__PrDi6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Backdrop\":\"Backdrop_Backdrop__38_ho\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"newButton\":\"BooksPage_newButton__3OQ4z\"};","const aux = (props) => props.children;\n\nexport default aux;","import React from 'react';\nimport classes from './Toolbar.module.css';\n\nconst toolbar = () => (\n    <header className={classes.header}>\n        <h2 className={classes.h2} >Your library</h2>\n    </header>\n)\n\nexport default toolbar;","import React, {Component} from 'react';\nimport classes from './Layout.module.css';\nimport Aux from '../../UI/Aux/Aux';\nimport Toolbar from '../../components/Toolbar/Toolbar';\n\nclass Layout extends Component {\n    render(){\n        return(\n            <Aux>\n                <Toolbar />\n                <main className={classes.Content}>\n                    {this.props.children}\n                </main>\n            </Aux>\n        )\n    }\n}\n\nexport default Layout","import React from 'react';\nimport classes from './Input.module.css';\n\nconst input = (props) => {\n    let inputElement = null;\n    const inputClasses = [classes.InputElement];\n\n    if (props.invalid && props.validation && props.touched ){\n        inputClasses.push(classes.Invalid);\n    }\n\n    switch (props.elementType){\n        case('input'):\n            inputElement = <input className={inputClasses.join(' ')} {...props.elementConfig} value={props.value} onChange={props.changed} />;\n            break\n        case('select'):\n            inputElement = <select className={inputClasses.join(' ')} value={props.value} onChange={props.changed}> \n                                {props.elementConfig.options.map(option => (\n                                    <option key={option.value} value={option.value}> {option.displayValue} </option>\n                                ))}\n                           </select>;\n            break;\n        default:\n            inputElement= <input className={inputClasses.join(' ')} {...props.elementConfig} value={props.value} onChange={props.changed} />\n    }\n\n    return (\n        <div>\n            <label className={classes.Label}>{props.label}</label>\n            {inputElement}\n        </div>\n    )\n\n}\n\nexport default input;","import React from 'react';\nimport classes from './Button.module.css'\n\nconst button = (props) => (\n    <button\n        disabled={props.disabled}\n        className={[classes.Button, classes[props.btnType]].join(' ')}\n        onClick={props.clicked}>{props.children}\n    </button>\n);\n\nexport default button;","import * as actionTypes from './actionTypes';\n\nexport const addBook = (bookData) => {\n    return {\n        type: actionTypes.ADD_BOOK,\n        bookData: bookData\n    };\n};\n\nexport const editBook = (updatedBooks) => {\n    return {\n        type: actionTypes.EDIT_BOOK,\n        updatedBooks: updatedBooks\n    };\n};\n\nexport const fetchBooks = (storedBooks)=>{\n    return {\n        type: actionTypes.FETCH_BOOKS,\n        storedBooks: storedBooks\n    };\n};\n\n\n\n\n\n\n\n\n\n","export const ADD_BOOK = 'ADD_BOOK';\nexport const EDIT_BOOK = 'EDIT_BOOK';\nexport const FETCH_BOOKS = 'FETCH_BOOKS';\n","import React, { Component } from \"react\";\nimport Input from '../../UI/Input/Input';\nimport classes from './LibraryForm.module.css';\nimport Button from '../../UI/Button/Button';\nimport { connect } from 'react-redux';\nimport * as actions from '../../store/actions/index';\n\nclass LibraryForm extends Component {\n\n    state = {\n        newBook: {\n            title: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder:'Title of your book'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 2\n                },\n                valid: false,\n                touched: false\n                },\n            author: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder:'Author'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 5\n                },\n                valid: false,\n                touched: false\n            },\n            pages: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'number',\n                    placeholder:'Number of pages',\n                    min:'10',\n                    max:'5000'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            status: {\n                elementType: 'select',\n                elementConfig: {\n                options: [\n                    {value: 'read', displayValue: 'Read'},\n                    {value: 'unread', displayValue: 'Unread'}\n                ]\n                },\n                value: 'unread',\n                validation: {\n                    required: true\n                },\n                valid: true,\n                touched: false\n            },\n            notes: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder:'Your notes about the book'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            }\n        },\n        formIsValid: false\n    }\n\n     baseState = this.state\n\n     resetForm = () => {\n         this.setState(this.baseState);\n         this.props.submitted()\n     }\n\n    inputChangeHandler = (event, inputID) => {\n        const updatedForm = {\n            ...this.state.newBook\n        };\n        const updatedElement = {\n            ...updatedForm[inputID]\n        };\n        updatedElement.value = event.target.value;\n        updatedElement.touched= true;\n        updatedElement.valid = this.checkValidity(updatedElement.value, updatedElement.validation);\n        updatedForm[inputID] = updatedElement;\n\n        let formIsValid = true;\n\n        for (let inputId in updatedForm){\n            formIsValid = updatedForm[inputId].valid && formIsValid\n        }\n\n        this.setState({newBook: updatedForm, formIsValid: formIsValid});\n    }\n\n    checkValidity(value, rules) {\n        let isValid = false;\n\n        if (rules.required) {\n            isValid = value.trim() !== '';\n        }\n        if (rules.minLength){\n            isValid = value.length >= rules.minLength && isValid\n        }\n        if (rules.maxLength){\n            isValid = value.length <= rules.maxLength && isValid\n        }\n\n        return isValid;\n    }\n\n    addBookHandler = (event)=> {\n        event.preventDefault();\n        let newBookData = {\n            title: this.state.newBook.title.value,\n            author: this.state.newBook.author.value,\n            pages: this.state.newBook.pages.value,\n            status: this.state.newBook.status.value,\n            notes: this.state.newBook.notes.value\n        };\n        //send the action to store\n        this.props.onAddBook(newBookData)\n        //for closing the modal\n        this.props.submitted()\n    }\n\n\n    render(){\n\n        let formArray = []\n        for (let key in this.state.newBook){\n            formArray.push({\n                id: key,\n                config: this.state.newBook[key]\n            })\n        }\n\n        let form = (\n            <form onSubmit={this.addBookHandler} onReset={()=>this.resetForm()} onLoad={()=>this.resetForm()} >\n                {formArray.map(element => (\n                    <Input\n                        key={element.id}\n                        elementType={element.config.elementType}\n                        elementConfig={element.config.elementConfig}\n                        value={element.config.value}\n                        validation={element.config.validation}\n                        invalid={!element.config.valid}\n                        touched={element.config.touched}\n                        changed={(event)=> this.inputChangeHandler(event, element.id)}\n                    />\n                ))}\n                <Button btnType=\"Success\" disabled={!this.state.formIsValid}>Submit</Button>\n                <input className={classes.Reset} type=\"reset\" value=\"Cancel\"></input>\n            </form>\n        )\n\n        return (\n            <div className={classes.FormData} >\n                {form}\n            </div>\n        )\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onAddBook: (bookData)=> dispatch(actions.addBook(bookData))\n    }\n}\n\nexport default connect(null, mapDispatchToProps)(LibraryForm);","import React from 'react';\nimport classes from './Backdrop.module.css';\n\nconst backdrop = (props) => (\n    props.show ? <div className={classes.Backdrop} onClick={props.clicked} ></div> : null\n);\n\nexport default backdrop;","import React, {Component} from 'react';\nimport classes from './Modal.module.css'\nimport Aux from '../../UI/Aux/Aux';\nimport Backdrop from './Backdrop';\nimport CSSTransition from \"react-transition-group/CSSTransition\";\n\nclass Modal extends Component {\n\n    render(){\n        const animationTiming = {\n            enter: 400,\n            exit: 1000\n        };\n\n        return (\n\n        <Aux>\n            <Backdrop show={this.props.show} clicked={this.props.modalClosed} />    \n            <CSSTransition\n                mountOnEnter \n                unmountOnExit \n                in={this.props.show} \n                timeout={animationTiming}\n                classNames={{\n                    enter: '',\n                    enterActive: classes.ModalOpen,\n                    exit: '',\n                    exitActive: classes.ModalClosed\n                }}> \n            \n                <div className={classes.Modal}> \n                    {this.props.children}\n                </div>\n            </CSSTransition>\n        </Aux>\n        )\n    }\n} \n\nexport default Modal;\n\n","import React, { Component } from \"react\";\nimport MaterialTable from \"material-table\";\nimport { connect } from 'react-redux';\nimport * as actions from '../../store/actions/index';\n\nclass LibraryItems extends Component {\n\n  state = {\n    data: null\n  }\n\n  //save the books to localstorage with every update of this component\n  componentDidUpdate(){\n    localStorage.setItem('books', JSON.stringify(this.props.books))\n  }\n  \n  render() {\n    \n    return (\n      <div style={{ maxWidth: \"100%\" }}>\n        <MaterialTable\n          columns={[\n            { title: \"Title\", field: \"title\"},\n            { title: \"Author\", field: \"author\" },\n            { title: \"Pages\", field: \"pages\" },\n            { title: \"Read\", field: \"status\", type: \"boolean\" },\n            { title: \"Notes\", field: \"notes\" }\n            \n          ]}\n          \n          title=\"\"\n\n          editable={{\n            onRowUpdate: (newData, oldData) =>\n              new Promise((resolve, reject) => {\n                setTimeout(() => {\n                  {\n                    const data = this.props.books;\n                    const index = data.indexOf(oldData);\n                    data[index] = newData;\n                    this.setState({ }, () => resolve());\n                    this.props.onEditBook(data)\n                  }\n                  resolve()\n                }, 1000)\n              }),\n              onRowDelete: oldData => \n              new Promise ((resolve, reject)=> {\n                setTimeout(()=> {\n                  {\n                    let data = this.props.books;\n                    const index = data.indexOf(oldData);\n                    data.splice(index, 1);\n                    this.setState({ }, () => resolve());\n                    this.props.onEditBook(data)\n                  }\n                  resolve()\n                }, 1000);\n              })\n          }}\n\n          data={this.props.books}\n        />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    books: state.books\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n      \n      onEditBook: (updatedBooks) => dispatch(actions.editBook(updatedBooks))\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LibraryItems)","import React,{ Component } from 'react';\nimport Aux from '../../UI/Aux/Aux';\nimport LibraryForm from '../../components/LibraryForm/LibraryForm'\nimport Modal from '../../UI/Modal_Backdrop/Modal';\nimport Button from '../../UI/Button/Button';\nimport classes from './BooksPage.module.css';\nimport LibraryItems from '../../components/LibraryItems/LibraryItems';\n\nclass BooksPage extends Component {\n\n    state = {\n        modalIsOpen: false,\n        showBlock: false,\n        resetForm: false\n      };\n    \n    showModal = () => {\n        this.setState({ modalIsOpen: true, resetForm: false });\n        console.log('Show modal')\n      };\n    \n    closeModal = () => {\n        this.setState({ modalIsOpen: false, resetForm: true });\n        console.log('close modal');\n      };\n\n    render(){\n        return (\n            <Aux>\n                <Modal show={this.state.modalIsOpen} modalClosed={this.closeModal} >\n                    <LibraryForm submitted={this.closeModal}  />\n                </Modal>\n                <div className={classes.newButton} >\n                    <Button btnType=\"Success\" clicked={this.showModal}>Add new book</Button>\n                </div>\n                <LibraryItems />\n            </Aux>\n        )\n    }\n}\n\nexport default BooksPage","import React, {Component} from 'react';\nimport Layout from './containers/Layout/Layout';\nimport './App.css';\nimport BooksPage from './containers/BooksPage/BooksPage';\nimport { connect } from 'react-redux';\nimport * as actions from './store/actions/index';\n\nclass App extends Component {\n\n  //load \"default\" books if the localstorage is empty\n  componentDidMount(){\n    const localBooks = localStorage.getItem('books');\n    if (!localBooks){\n      let book1 = {\n        title: 'Robinson Crusoe',\n        author: 'Daniel Defoe',\n        pages: '252',\n        status: true,\n        notes: 'very great book'\n      };\n      let book2 = {\n        title: 'The Old Man and the Sea',\n        author: 'Ernest Hemingway',\n        pages: '127',\n        status: true,\n        notes: 'such an inspirative book'\n      };\n\n      this.props.onAddBook(book1)\n      this.props.onAddBook(book2)\n      localStorage.setItem('books', JSON.stringify(this.props.books))\n    } else {\n      this.props.onFetchBooks(JSON.parse(localBooks))\n    }\n\n  }\n\n  render(){\n\n    return (\n      <Layout>\n        <BooksPage />\n      </Layout>\n    )\n  }\n} \n\nconst mapStateToProps = state => {\n  return {\n    books: state.books\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n      onAddBook: (bookData) => dispatch(actions.addBook(bookData)),\n      onFetchBooks:(storedBooks)=> dispatch (actions.fetchBooks(storedBooks))\n  }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as actionTypes from '../actions/actionTypes';\n\nconst initialState = {\n    books:[]\n}\n\nconst reducer = (state=initialState, action) => {\n    switch (action.type){\n        case actionTypes.ADD_BOOK:\n            return {\n                ...state,\n                books: state.books.concat({...action.bookData})\n            }\n        case actionTypes.EDIT_BOOK:\n            return {\n                ...state,\n                books: action.updatedBooks\n            }\n        case actionTypes.FETCH_BOOKS:\n            return {\n                ...state,\n                books: action.storedBooks\n            }\n            \n        default:\n            return state\n    }\n};\n\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport thunk from 'redux-thunk';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport * as serviceWorker from './serviceWorker';\nimport reducer from './store/reducers/bookHandlerReducer';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(reducer, composeEnhancers (applyMiddleware(thunk)));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}